= Docker Commands =

`docker images` : List the available images

`docker ps` : List the running containers

`docker ps -a` : List all containers

`docker run --name <container name> -it <image name>:<image version>` : Start a new container from image. E.g.: `docker run --name vim_install -it ubuntu:16.04`

`docker start <container name>` : Start a stopped container. E.g.: `docker start vim_install`

`docker attach <container name>` : Attach to a running container. E.g.: `docker attach vim_install`

`docker exec -it <container name> <program to execute>` : Execute a program in a running container. E.g.: To execute the command line in a Linux based running container you can use `docker exec -it <container name> <program to execute>`.

`docker rm <container name>` : Remove a container

`docker rmi <image name>` : Remove an image

`docker cp <source file> <destination container>:<destination location>` : Copy a file from the host computer to the container. E.g.: `docker cp ./host/temp/Programs/CppLint/file.txt vim:/root/temp`

`docker cp <destination container>:<destination location> <source file>` : Copy a file from the container to host computer. E.g.: `docker cp vim:/root/temp/file.txt ./host/temp/Programs/CppLint/`

`docker commit -a "<author>" -m "<message>" <container id> [<dockerhub user>]<image name>:<tag>` : Commit a container into an image. E.g.: `docker commit -a "Roger Santos" -m "My Comment" ec6cc8c6e490 rogersantos/vim:1.0`

`docker diff <container id>` : Shows the difference between the current container and the original image.

`docker tag <image id> [<dockerhub user>]/<image name>:<tag>`: Tag an image. E.g.: `docker tag 5ffd21ba24cf rogersantos/vim:1.0`

`docker push [<dockerhub user>]/<dockerhub repository name>` : Pull an image into the DockerHub repository. Note: You need to be logged before pushing an image. E.g.: `docker push rogersantos/vim`

`docker login` : Log into the DockerHub repository.

`docker volume rm $(docker volume ls -f dangling=true -q)` : Remove dangling volumes (Volumes not being used at the moment). Note: if you need sudo use: `sudo docker volume rm $(sudo docker volume ls -f dangling=true -q)`

`docker stop $(docker ps -a -q)`: Stop all containers.  

`docker rm $(docker ps -a -q)`: Remove all containers.

`docker rm $(docker ps -a -f status=exited -q)`: Remove all exited containers.

`docker rmi $(docker images -a -q)`: Remove all images.

`docker rmi $(docker images -f dangling=true -q)`: Remove dangling images

== Start / Attach options ==

`-v <local folder>:<remote folder>` : Mount a folder (volume) from the host into the container. Note the container folder should have the full path. E.g.: `-v ~/host:/root/host`. 

== Multi-Platform ==

`docker run --rm --privileged multiarch/qemu-user-static:register --reset` : Allow you run different platforms using docker. It uses QEMU emulation to do it.
