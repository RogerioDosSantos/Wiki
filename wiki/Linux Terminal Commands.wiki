= Linux Terminal Commands =

== User ==

`sudo ` : Run elevated   

`su - ` : Become root (Super User)

`su <username> ` : ls

`adduser <username> ` : Add an user

`usermod -aG <group1>,<group2>,<etc..> <user name> ` : change the group of the user

`usermod -d /home/<new name> -m -g <new name> -l <new name> <old name> ` : Change the user. This changes the name, the group, the home directory and ownership and group of of that directory to the new ones, along with all the files.

`groups ` : list all groups for the current user

`/etc/passwd ` : File with a list of all users

`/etc/group ` : File with a list of all groups


== Directories and Files ==

`pwd ` : Show the directory you are

`ls -all` : List all files and directories into the current directory 

`chmod a+x <filename> ` : Make a file executable

`mkdir <directory name>` : Create directory

`touch <filename> ` : create a file

`rm <filename> ` : remove a file

`rmdir <directory> ` : remove directory

`rm -rf <directory> ` : remove all directory and files recursively.

`cp <source> <destination>` : Copy command

`ln -s <path to be linked> <path where the link file will be created> ` : Create a symbolic link (Shortcut)

`pwd -P ` : Show the physical directory you are

`ls -l ` : List all files and directories into the current directory

`mv ` : Move or rename a file or directory

`tree ` : Display the tree of directories and sub directories

`wget <http or ftp url> ` : Get a file from the internet

`wget --mirror <htttp or ftp url> ` : Mirror an url 


== File Permission ==

Commands:

`ls -l` : List file permission

`chmod` : Change permissions. E.g.: chmod +x <filename>

{{{

  Identification:
    d : Directory
    - : File

  Three permission triads:
    first triad : what the owner can do
    second triad : what the group members can do
    third triad : what other users can do

    Each triad
      first character r : readable
      second character w : writable
      third character x : executable
      s or t : executable and setuid/setgid/sticky
      S or T : setuid/setgid or sticky, but not executable
}}}

== Programs and OS ==

`info <command name> ` : List the information of a specific command. If you do not mention the <command name> it will list the command available.

`shutdown -r now ` : Restart the device

`uname -a ` : Get the OS version

`top ` : Process monitor

`<program name> --version ` : Get the version of a program

`printenv ` : Shows the environment variables

`getenv <environment variable> ` : Shows the environment variable value. 

`setenv <environment variable> <value>` : Set the environment variable a value

`whereis <program> ` : find where is the location of a specific program

`lsof ` : List all open files and its process (You need to run as super user). E.g.: lsof >Result.txt

`ps -aux ` : List of all running process

`vmstat ` : Virtual Memory Statistics

`compgen -c ` : List all the commands you could run.

`compgen -a ` : List all the aliases you could run.

`compgen -b  ` : List all the built-ins you could run.

`compgen -k  ` : List all the keywords you could run.

`compgen -A  ` : List all the functions you could run.

`compgen -A  ` : function -abck will list all the above in one go.

`apt-get install <package name> ` : Install a package (For Debian: E.g.: Ubuntu)

`apt-get --purge remove <package name> ` : Uninstall a package (For Debian: E.g.: Ubuntu)

`Yum install <package name> ` : Install a package (For RPM: E.g.: Fedora)

`free ` : Display the amount of free and used system memory (Default: Kilobytes).

`watch <program to execute> ` : Execute a program every period of time (Default: 2 seconds)

`sudo service <service name> restart ` : Restart a Server

`blkid ` : Allow to see the available devices. Those devices can be mounted

`fdisk -l ` : Allow to see the available devices. Those devices can be mounted

`mount <device or network share> <local folder> ` : Mount a device or shared folder into a local folder.

`umount <local folder> ` : Mount a device or shared folder into a local folder.

`cat > <file name> ` : Create a file and allow you to edit it. Careful! if you do it into an existing file, its content will be deleted.

`find <directory to start> -name "<file to find>" ` : Find file in all sub directories

`grep --include=\*.{cpp,h} -rnw <source directory> -e "<text to find>" ` : Find a text into files

`encfs <encrypted folder content> <mounted folder> ` : Enable cryptography on the mounted folder saving the content into the encrypted folder. (E.g.: encfs ~/.encrypted ~/encrypted)

`fusermount -u <mounted folder> ` : unmount folder.


== Network ==

`lsof -i ` : List all open files by a process. This can also be used for network since a network connection is a open file.

`netstat -lptu ` : List all the programs with open ports

`netstat -an | grep ` :<port number> : Check if a port is running

`ssh <user>@<ip> ` : Connect to a remote machine using ssh (exit to remove)

`scp <source file on the local machine> <user>@<ip>` :<destination path remote machine> : Copy a file from the source machine to the destination machine.

`ifconfig <Adapter> <IP> netmask <Mask> ` : Change the ip (E.g.: ifconfig eth0 192.168.0.1 netmask 255.255.255.0)

`route add default gw <IP> <Adapter> ` : Change default gateway (E.g.: route add default gw 192.168.0.253 eth0)

`/etc/init.d/networking restart ` : Restart all network adapters.

== File Editors and Content ==

`nano <file name>` : File Editor

`cat <file name>` : Show the text available into a file.

`mv <filename>` : Move the file or change the name

`less <filename>` : Allow you verify the content of a file (Press q to exit)


== Programming ==

`make <entry cpp file without extension> ` : Compile a cpp file into an executable (E.g.: make test >> for test.cpp)

`g++ -c [-I<include_path>] <file_path>.cpp ` : Compile using g++ to an object file.

`make <target of a make file> ` : Compile a target of a make file


== Screen View ==

`clear ` : Clear Console

`Ctrl Alt F2 ` : Go to console mode

`Ctrl Alt F7 ` : Go back to gui mode.

`| more ` : Add the more command on the command line 


== Initialization / Service ==

*/boot/cmdline.txt*
{{{
  Control the command line initialization.
  To init on the console command as root you can add the following command on it:
  rw init=/bin/bash
  This will not execute any service or initialization file.     
}}}

*/etc/init.d/*
{{{
  On this folder is located all the initialization scripts. To add a script to be initialized you can copy the script to this file and use the command:
}}}

`update-rc.d -f <shell name> remove ` : Remove any previous shell with the same name
`update-rc.d <shell name> defaults 99 ` : Add the shell to be executed on the initialization.


== Distributions ==

`Ubuntu ` : Debian distribution

`Kali Linux ` : Penetration and security auditing distribution - Default user: root ; Default password: toor

== Environment variables ==

`$<variable> ` : Show the environment variable E.g.: $PATH

`PATH=$PATH: <folder> `: Put the <folder> into the PATH environment variable

== Git ==

origin (Server) >> master (Work branch) >> Header (Local commits) >> tracked (files added) >> untracked (any change)

`git config --global user.email <your e-mail> ` : config your e-mail account globally

`git config --global user.name <your name> ` : config your name globally

`git  init ` : Initialize git repository. To init the repository on the server, use the option --bare

`git add <folder> ` : add content to the git repository

`git diff --cached --name-status ` : Get the list of the git files added

`git diff HEAD <file name> ` : Compare the file with the one added.

`git commit -m <check-in description> ` : send the content to the git repository

`git config --list ` : List the current git configuration

`git clone <repository git url> <local folder name> ` : Clone git repository (E.g.: git clone ssh://git@192.168.56.113/~/git-server/leel.git)

`git status ` : Show the current status of the git repository

`git push ` : Push the changed to the server

`git config --global credential.helper "cache --timeout=3600" ` : configure to cache your credentials for a specific amount of time.

=== Submodules: ===

`git submodule add <repository url> ` : Add a submodule into a git project.

`git submodule add -b <branch> <repository url> ` : Add a submodule that tracks a branch

`git submodule init ` : Initialize the submodule configuration. You should run it after you clone the project with submodule on it.

`git submodule update` : Get the content of all submodules.

`git checkout <branch or label> ` : Checkout a branch to allow edition on it.

`git status --ignore-submodules=dirty ` : Ignore the dirty feature that slow down the command in case you have submodules with a lot of files. You can also change the ".gitmodules" files to add the following entry in a submodule you want to ignore: ignore == dirty

=== Tags: ===

`git tag -l <pattern> ` : List the tags available. If <pattern> is nothing it will list all the tags

`git describe --tags ` : Inform in what tag you are on

=== Ignore Directory ===

Create a file called .gitignore into your project folder and add all folders that should be ignored. 

=== Initialize Repository ===

{{{
Create repository on Github
On Linux use the commands:
echo "# linux_environment" >> README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin <repository .git url>
git push -u origin master
}}}

== TMUX ==

`tmux a <session number> ` : attach  

`tmux ls ` : list sessions

`tmux kill-session -t <session number or session name name> ` : kill sessions

`ctrl+b` : Command mode

=== Command Mode - Sessions ===

`:new<CR> ` : new session

`s ` : list sessions

`$ ` : name session

`d ` : detach session

=== Command Mode - Windows (tabs) ===

`c ` : new window

`, ` : name window

`w ` : list windows

`f ` : find window

`& ` : kill window

`. ` : move window - prompted for a new number

`:movew ` : move window to the next unused number

=== Command Mode - Panes (splits) ===

`% ` : vertical split

`" ` :horizontal split

`o ` : Go to the next pane

`ctrl+o ` : Swap pane contents

`q ` : show pane numbers

`x ` : kill pane

`z ` :Maximaze and minimize current vi"

== Others ==

=== Launch application on double click ===

{{{
Make sure your script contains the follofing identifier on the first line:
#!/bin/bash

Create a file <name>.desktop with the following entries:

[Desktop Entry]
Name=<name of the executable>
Comment=<comment about the executable>
Exec=<path of the executable>
Icon=<icon to be used or nothing (empty)>
Terminal=false
Type=Application

make your <name>.desktop to be an executable
chmod +x <name>.desktop
}}}

== VirtualBox Vms ==

`sudo mount -t vboxsf <shade folder> <local folder> ` : Mount Virtual Box Shared Folder (E.g.: sudo mount -t vboxsf share /mnt/d) 































